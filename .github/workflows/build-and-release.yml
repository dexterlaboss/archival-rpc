name: Build and Release Solana Archival RPC

on:
  push:
    tags:
      - 'v*'

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - uses: actions/checkout@v3

      # Cache the Cargo registry (dependencies)
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      # Cache the Cargo index (Git dependencies)
      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      # Cache the target directory (build artifacts)
      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      # Set up Rust (use version 1.70.0)
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.70.0
          profile: minimal
          override: true

      # Build the project with Cargo for x86_64
      - name: Build for x86_64
        env:
          CARGO_TARGET: x86_64-unknown-linux-gnu
        run: cargo build --release --target $CARGO_TARGET

      # Build the project with Cargo for arm64
      - name: Build for arm64
        env:
          CARGO_TARGET: aarch64-unknown-linux-gnu
        run: cargo build --release --target $CARGO_TARGET

      # Log in to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push the Docker image for multi-architecture
      - name: Build and push Docker image
        run: |
          docker buildx create --use
          docker buildx build \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            --platform linux/amd64,linux/arm64 \
            --tag dexterlaboss/archival-rpc:${GITHUB_REF_NAME} \
            --push .

      # Create GitHub Release
      - name: Create GitHub Release
        id: gh-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref }}
          body: 'Release of version ${{ github.ref }}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload the compiled binary for x86_64 to the release
      - name: Upload x86_64 binary to GitHub Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.gh-release.outputs.upload_url }}
          asset_path: ./target/x86_64-unknown-linux-gnu/release/archival-rpc
          asset_name: archival_rpc_${{ github.ref_name }}_linux_amd64
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload the compiled binary for arm64 to the release
      - name: Upload arm64 binary to GitHub Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.gh-release.outputs.upload_url }}
          asset_path: ./target/aarch64-unknown-linux-gnu/release/archival-rpc
          asset_name: archival_rpc_${{ github.ref_name }}_linux_arm64
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}