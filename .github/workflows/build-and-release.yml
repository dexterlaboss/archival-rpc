name: Build and Release Solana Archival RPC

on:
  push:
    tags:
      - 'v*'

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - uses: actions/checkout@v3

      # Set up Rust
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.70.0
          profile: minimal
          override: true

      - name: Install dependencies for cross-compilation
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            libc6-dev-arm64-cross

      # Add Rust targets
      - name: Add Rust targets
        run: |
          rustup target add x86_64-unknown-linux-gnu
          rustup target add aarch64-unknown-linux-gnu

      # Set up Cargo configuration for cross-compilation
      - name: Configure Cargo for cross-compilation
        run: |
          mkdir -p .cargo
          echo '[target.aarch64-unknown-linux-gnu]' >> .cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> .cargo/config.toml

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v1-rust-cache"

      # Build arm64 binary
      - name: Build arm64 binary
        run: |
          cargo build --release --target aarch64-unknown-linux-gnu
          mkdir -p output/linux/arm64
          cp target/aarch64-unknown-linux-gnu/release/archival-rpc output/linux/arm64/

      - name: Build and push Docker images
        run: |
          docker buildx create --use
          docker buildx build \
            --platform linux/arm64 \
            --build-arg AMD64_BINARY="$(pwd)/output/linux/amd64/archival-rpc" \
            --build-arg ARM64_BINARY="$(pwd)/output/linux/arm64/archival-rpc" \
            --tag dexterlaboss/archival-rpc:${GITHUB_REF_NAME} \
            --push .

      # Build x86_64 binary
      - name: Build x86_64 binary
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu
          mkdir -p output/linux/amd64
          cp target/x86_64-unknown-linux-gnu/release/archival-rpc output/linux/amd64/

      # Build and push Docker images
#      - name: Build and push Docker images
#        run: |
#          docker buildx create --use
#          docker buildx build \
#            --platform linux/amd64,linux/arm64 \
#            --build-arg AMD64_BINARY="$(pwd)/output/linux/amd64/archival-rpc" \
#            --build-arg ARM64_BINARY="$(pwd)/output/linux/arm64/archival-rpc" \
#            --tag dexterlaboss/archival-rpc:${GITHUB_REF_NAME} \
#            --push .

      # Log in to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Extract x86_64 binary from Docker container
      - name: Extract x86_64 binary
        run: |
          mkdir -p ${{ github.workspace }}/output
          docker create --platform linux/amd64 --name extract-amd64 dexterlaboss/archival-rpc:${GITHUB_REF_NAME}
          docker cp extract-amd64:/solana/archival-rpc ${{ github.workspace }}/output/archival_rpc_${{ github.ref_name }}_linux_amd64
          docker rm extract-amd64

      # Extract arm64 binary from Docker container
      - name: Extract arm64 binary
        run: |
          mkdir -p ${{ github.workspace }}/output
          docker create --platform linux/arm64 --name extract-arm64 dexterlaboss/archival-rpc:${GITHUB_REF_NAME}
          docker cp extract-arm64:/solana/archival-rpc ${{ github.workspace }}/output/archival_rpc_${{ github.ref_name }}_linux_arm64
          docker rm extract-arm64

      # Create GitHub Release
      - name: Create GitHub Release
        id: gh-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref }}
          body: 'Release of version ${{ github.ref }}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload x86_64 binary to GitHub Release
      - name: Upload x86_64 binary to GitHub Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.gh-release.outputs.upload_url }}
          asset_path: ./output/linux/amd64/archival-rpc
          asset_name: archival-rpc_${{ github.ref_name }}_linux_amd64
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload arm64 binary to GitHub Release
      - name: Upload arm64 binary to GitHub Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.gh-release.outputs.upload_url }}
          asset_path: ./output/linux/arm64/archival-rpc
          asset_name: archival-rpc_${{ github.ref_name }}_linux_arm64
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
